#!/usr/bin/env node

var _ = require('lodash');
var Metalsmith = require('metalsmith');
var templates = require('metalsmith-templates');
var markdown = require('metalsmith-markdown');
var sass = require('metalsmith-sass');
var metallic = require('metalsmith-metallic');
var serve = require('metalsmith-serve');
var watch = require('metalsmith-watch');
var path = require('path');
var cheerio = require('cheerio');
var commander = require('commander');
var program = new commander.Command()
  .option('-s --serve', 'serve and watch for changes')

program.parse(process.argv);

var indexify = function() {
  return function indexify(files, metalsmith, done) {
    _.forEach(files, function(data, file) {
      var match = file.match(/(.*)\.html?$/i);
      if (match && !file.match(/index\.html?/i)) {
        files[match[1] + '/index.html'] = data;
        delete files[file];
      }
    });
    done();
  };
};

var toc = function() {
  return function toc(files, metalsmith, done) {
    _.forEach(files, function(data, file) {
      if (!data.toc) { return; }
      var $ = cheerio.load(data.contents);
      var level = 0;
      var result = [];
      var root = { children: result };
      var nodes = [root];

      $('h1[id], h2[id], h3[id], h4[id]').each(function() {
        var headerLevel = this.tagName.match(/h(\d)/)[1] - 1;

        while (headerLevel < level) {
          delete nodes[level];
          level -= 1;
        }

        while (headerLevel > level) {
          level += 1;
          if (!nodes[level]) {
            throw new Error('Header level skipped, cannot generate TOC.');
          }
          nodes[level].children = nodes[level].children || [];
        }

        var parent = nodes[headerLevel];
        var header = $(this);
        var title = header.text();
        var name = header.attr('id');
        var node = {
          id: name,
          title: title
        };

        parent.children.push(node);
        nodes[headerLevel+1] = node;
      });

      data.toc = result;
    });

    done();
  };
};

var metalsmith = Metalsmith(path.join(__dirname, '..'))
  .source('./source')
  .destination('./build')
  .use(sass())
  .use(metallic())
  .use(markdown())
  .use(toc())
  .use(templates('swig'))
  .use(indexify());

if (program.serve) {
  metalsmith = metalsmith
    .use(watch({}))
    .use(serve());
}

metalsmith.build(function(err){
  if (err) { throw err; }
});
