#!/usr/bin/env node --harmony

var _ = require('lodash');
var Promise = require('bluebird');
var util = require('util');
var fs = Promise.promisifyAll(require('fs'));
var co = require('co');


var updateFile = co.wrap(function*(file) {
  var contents = yield fs.readFileAsync(file, { encoding: 'utf8' });

  // var r = /expect\(adapter\.executedSQL\)\.to\.eql\([\s\S]*?(\[[\s\S]*?([^]*?)[\s\S]*?\])[\s\S]*?\);/gi;

  var r = /\.then\(function\(\)\s*\{([^]*?)\}\)[\s\n]*\.(?:done|then)\(done, done\);/gi;

  var matches = contents.match(r);

  contents = contents.replace(r, function(match, p1) {
    if (p1.match(/adapter.should.have.executed/) && p1.match(/;/g).length <= 1) {
      return util.format('.should.eventually.exist.meanwhile(adapter)%s', p1.replace('adapter.should', '.should'))
    }
    else { return match; }
    // return util.format('adapter.should.have.executed(%s);', p1);
  });
  // matches = matches || [];
  // matches.forEach(func)

  // console.log(matches.length)
  // console.log(contents)
  yield fs.writeFileAsync(file, contents);
});

Promise.all(process.argv.slice(2))
.map(updateFile)
.then(function() {
  console.log('done');
});
